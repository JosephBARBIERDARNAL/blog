---
title: "Getting Started with {geomtextpath}"
author: "Libby Heeren"
format: html
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r invisible set up}
#| message: false
#| warning: false
#| echo: false

library(tidyverse)
library(geomtextpath)

vehicles <- fueleconomy::vehicles

avg_hwy <- vehicles |> 
  filter(year %in% c(1985:1990),
         drive %in% c("Rear-Wheel Drive", "4-Wheel or All-Wheel Drive")) |> 
  group_by(year, drive) |> 
  summarise(mean_hwy = mean(hwy))

```

Have you ever created a great line graph only to feel frustrated that it requires a legend? What if you could label the lines directly? Even the curvy ones? And have the text follow the curvature of the lines!

```{r debut line graph}
#| message: false
#| warning: false
#| echo: false

avg_hwy |> 
  ggplot(aes(x = year, 
             y = mean_hwy, 
             color = drive,
             label = drive)) +
  geom_textline(linewidth = 0.75,
                text_smoothing = 40,
                vjust = -0.25,
                size = 5) +
  labs(title = "Average Highway Gas Mileage",
       x = NULL,
       y = NULL) +
  lims( y = c(18, 22)) +
  theme_minimal(base_size = 16) +
  theme(legend.position = "none")
```

With the `{geomtextpath}` package, you can annotate your `ggplot` visualizations with clean labels and customized text annotations that can follow the shapes in your data, and it's so much easier to get started than you'd imagine.

# The Basics

First, let's load our packages and pull our data. We'll be using a subset of the `vehicles` data from the `{fueleconomy}` package.

```{r visible set up}
#| message: false
#| warning: false
#| eval: false

library(tidyverse)
library(geomtextpath)

vehicles <- fueleconomy::vehicles

avg_hwy <- vehicles |> 
  filter(year %in% c(1985:1990),
         drive %in% c("Rear-Wheel Drive", "4-Wheel or All-Wheel Drive")) |> 
  group_by(year, drive) |> 
  summarise(mean_hwy = mean(hwy))

```

We'll start by recreating the graph above using `{ggplot2}`, but without the labels.

```{r line graph with legend}
#| message: false
#| warning: false

avg_hwy |> 
  ggplot(aes(x = year, 
           y = mean_hwy, 
           color = drive)) +
  geom_line(linewidth = 0.75) +
  labs(title = "Average Highway Gas Mileage",
       x = NULL,
       y = NULL,
       color = "Year") +
  lims( y = c(18, 22)) +
  theme_minimal(base_size = 16)
```

The legend on this plot takes up nearly half the space! Sure, we could move the legend inside the plot, but that would still look cluttered. Instead, by replacing `geom_line()` with `geom_textline()` from the `{geomtextpath}` package, we will get the same line, but with a label floating inside it. And with that handy label, we can remove the legend.

```{r line graph with labels inside line}
#| message: false
#| warning: false

avg_hwy |> 
  ggplot(aes(x = year, 
             y = mean_hwy, 
             color = drive,
             label = drive)) +      # Add label argument to aes() to match color
  geom_textline(linewidth = 0.75) + # Replace geom_line() with geom_textline()
  labs(title = "Average Highway Gas Mileage",
       x = NULL,
       y = NULL) +
  lims( y = c(18, 22)) +
  theme_minimal(base_size = 16) +
  theme(legend.position = "none")   # Remove legend
```

That's cleaner already! And notice that the same `linewidth =` argument we used inside `geom_line()` works inside `geom_textline()` as well. We also needed to add the `label =` argument inside our plot's `aes()` call to let `geom_textline()` know what to use as a label value.

Now, let's move our text up to float just above our lines by adding an argument for `vjust =`, increase the font size using `size =`, and smooth out the shape of the text using `text_smoothing =`.

If you wanted to move the label back and forth horizontally along your line, you could also use `hjust =`. You can think of the `hjust` number as a value from 0 to 1 where 0 is the left-most point on the line and 1 is the right-most point. The default value is 0.5, which is the half-way point (50%) of the line. We'll stick with the default for our plot.

```{r line graph with labels above line}
#| message: false
#| warning: false

avg_hwy |> 
  ggplot(aes(x = year, 
             y = mean_hwy, 
             color = drive,
             label = drive)) +
  geom_textline(linewidth = 0.75,
                text_smoothing = 40, # text_smoothing default = 0, max is 100
                vjust = -0.25,  # vjust is a vertical adjustment
                size = 5) + # default is 3.88, let's increase to 5
  labs(title = "Average Highway Gas Mileage",
       x = NULL,
       y = NULL) +
  lims( y = c(18, 22)) +
  theme_minimal(base_size = 16) +
  theme(legend.position = "none")
```

That looks perfect! And it wasn't too complicated. If you're wondering what all the default aesthetic values are for `geom_textline`, you can find them the same way you'd find them for a `geom` in `{ggplot2}`:

```{r default geom_textline aes values}
#| message: false
#| warning: false

geomtextpath::GeomTextline$default_aes
```

# Basic Plot Annotation

Replacing a legend is fantastic, but you can also use `{geomtextpath}` to easily add annotation lines and text, too. Let's look at an example of a plot that could really use some annotation.

We'll create some fake cost and revenue data to play with.

```{r}
#| message: false
#| warning: false

break_even <- 
  tibble(
  units = seq(0, 100, 1),
  price = 50,
  fixed_cost = 750,
  variable_cost = 25,
  total_cost = fixed_cost + (variable_cost * units),
  total_revenue = price * units,
  break_even_units = fixed_cost / (price - variable_cost)
)
```

Using `geom_textline()`, we'll plot the total cost in red and the total revenue in green.

```{r break even plot: no ab lines}
#| message: false
#| warning: false

break_even |> 
  ggplot() +
  geom_textline(aes(x = units, 
                y = total_cost,
                label = "Cost"),
            linewidth = 1,
            color = "red4",
            hjust = 0.7,
            size = 5) +
  geom_textline(aes(x = units, 
                y = total_revenue,
                label = "Revenue"),
            linewidth = 1,
            color = "green3",
            hjust = 0.7, 
            size = 5) +
  labs(title = "Break Even Analysis",
       x = "Units",
       y = "Total Cost and Revenue ($)") +
  theme_minimal(base_size = 16) +
  theme(legend.position = "none")
```

This plot is clean and readable. Notice that we used `hjust = 0.7` to move the labels over from the default half-way point of the lines (`hjust = 0.5`) to the 70% point of the lines using `hjust = 0.7`.

```{r number line plot}
#| message: false
#| warning: false
#| eval: false
#| echo: false

tibble(
  x = seq(0, 100, 10), 
  y = 0
) |> 
  ggplot(aes(x = seq(0, 100, 10), y = 0, label = x)) +
  geom_line(color = "grey", linetype = "dotted", linewidth = .75) +
  geom_text(size = 6) +
  lims(x = c(0, 100), y = c(0, 0)) +
  theme_void()
```

![](images/number-line.png){fig-align="center"}

Since a Break Even Analysis is used to show how many units we need to sell to cover our fixed costs and start earning a profit, it would be useful to add lines showing what our fixed costs are and how many units we need to sell to break even. We can add horizontal and vertical annotation lines using {geomtextpath} with `geom_texthline()` and `geom_textvline()`. These replace `geom_abline()`.

We don't want our annotations to dominate the plot, so we can use dotted lines for them. Just like in `geom_line()`, we can specify line type with the `linetype =` argument. We can also get a little fancy by parameterizing our labels using `paste0()` so that they will always be correct, even if the data changes.

```{r break even plot: with ab lines}
#| message: false
#| warning: false

break_even |> 
  ggplot() +
  geom_textline(aes(x = units, 
                y = total_cost,
                label = "Cost"),
            linewidth = 1,
            color = "red4",
            hjust = 0.7,
            size = 5) +
  geom_textline(aes(x = units, 
                y = total_revenue,
                label = "Revenue"),
            linewidth = 1,
            color = "green3",
            hjust = 0.7, 
            size = 5) +
  geom_texthline(aes(yintercept = fixed_cost, 
                     label = paste0("Fixed Cost = $", fixed_cost)),
                 color = "steelblue4",
                 linetype = "dotted",
                 linewidth = .75,
                 hjust = 0.6,
                 size = 4.5) +
  geom_textvline(aes(xintercept = break_even_units, 
                     label = paste0(break_even_units, " units")),
                 color = "steelblue4",
                 linetype = "dotted",
                 linewidth = .75,
                 hjust = 0.6,
                 size = 4.5) +
  labs(title = "Break Even Analysis",
       x = "Units",
       y = "Total Cost and Revenue ($)") +
  theme_minimal(base_size = 16) +
  theme(legend.position = "none")
```

There we go. Our plot shows all the important information and we still avoid using a messy legend.

# What if I just want the text?

You can do that, too! Let's create a beautiful density plot to demonstrate. We will, of course, use everyone's favorite penguins data!

```{r pull penguins}
#| message: false
#| warning: false

penguins <- palmerpenguins::penguins |> 
  na.omit()
```

We could create a density plot using the `geom_textdensity()` function from `{geomtextpath}`, like this.

```{r penguins text density}
#| message: false
#| warning: false

penguins |> 
  filter(species == "Adelie") |> 
  ggplot(aes(x = bill_length_mm, 
             color = island, 
             label = island)) +
  geom_textdensity(linewidth = 1, 
                   size = 4) +
  labs(title = "Do Adelie penguins from different islands have different bill lengths?",
       x = "Bill Length (mm)",
       y = "Density") +
  theme_minimal(base_size = 16) +
  theme(legend.position = "none")
```

But, what if we want to create a beautiful filled density plot, like this?

```{r penguins filled density}
#| message: false
#| warning: false

penguins |> 
  filter(species == "Adelie") |> 
  ggplot(aes(x = bill_length_mm, 
             fill = island,
             color = island,
             label = island)) +
  geom_density(alpha = .5) +
  scale_color_manual(values = c("#CEA804", "#EA5F94", "#0000FF")) +
  scale_fill_manual(values = c("#FFD700", "#EA5F94", "#0000FF")) +
  labs(title = "Do Adelie penguins from different islands have different bill lengths?",
       x = "Bill Length (mm)",
       y = "Density",
       fill = "Island", 
       color = "Island") +
  theme_minimal(base_size = 16) 
```

Can we still use `{geomtextpath}` to label this plot and get rid of the legend? We sure can. We can use the `text_only = TRUE` argument to use **just** the text and not the line. Let's add it to our plot.

We'll use all the adjustment arguments we've learned so far, plus a few new ones: we'll use `hjust = "ymax"` to move the text labels to the highest points on the density plots (where the y-values are highest), and we'll use `spacing = 50` to space out our letters so they're not too squished.

```{r penguins filled density + labels}
#| message: false
#| warning: false

penguins |> 
  filter(species == "Adelie") |> 
  ggplot(aes(x = bill_length_mm, 
             fill = island,
             color = island,
             label = island)) +
  geom_density(alpha = .5) +
  geom_textdensity(text_only = TRUE,
                   text_smoothing = 25,
                   hjust = "ymax", 
                   vjust = -0.4, 
                   spacing = 50, 
                   size = 5) +
  scale_color_manual(values = c("#CEA804", "#EA5F94", "#0000FF")) +
  scale_fill_manual(values = c("#FFD700", "#EA5F94", "#0000FF")) +
  labs(title = "Do Adelie penguins from different islands have different bill lengths?",
       x = "Bill Length (mm)",
       y = "Density") +
  theme_minimal(base_size = 16) +
  theme(legend.position = "none")
```

Now we have a gorgeous filled density plot with no legend and clearly labeled lines.

# Resources and Further Reading

I hope you're excited to try using `{geomtextpath}` on your next plot! Here are some links to help you on your plotting journey:

-   [GitHub Page for {geomtextplot}](https://allancameron.github.io/geomtextpath/)

    -   Includes articles and reference guides!

-   [CRAN project page](https://cran.r-project.org/web/packages/geomtextpath/vignettes/geomtextpath.html)

Happy plotting!
