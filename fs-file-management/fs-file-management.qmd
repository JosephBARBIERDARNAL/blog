---
title: "Automate file management in R with the {fs} package"
author: Jadey Ryan
date: 2024-09-24
toc: false
format: gfm
execute: 
  warning: false
  message: false
knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    dev: "svglite"
    dev.args: { scaling: 1 }
    dpi: 300
    out.width: 80%
---

Tired of messy folders filled with inconsistently named files? The [`fs` package](https://fs.r-lib.org/index.html) is a powerful tool for automating tedious tasks like creating, renaming, moving, and deleting files and folders. This guide will show you how to use `fs` to quickly organize and clean up your files and folders.

`fs` has very nice, consistent syntax with the following four main categories of functions:

- `path_` for manipulating and constructing paths
- `file_` for files
- `dir_` for directories (this guide uses the terms *folders* and *directories* interchangeably)
- `link_` for links

Directories and links are special types of files, so `file_` functions will generally also work when applied to a directory or link.

Throughout this guide, we'll use `fs` for file/directory handling and `stringr` for string manipulation.

```{r}
library(fs)
library(stringr)
```

## Create an example messy folder

To demonstrate the power of `fs` for efficient file management, we first need to create a messy folder with inconsistently named files.  

Let's first create our example directory with nothing in it using `dir_create()`, and then check that it exists with `dir_exists()`.

```{r}
dir_create("fs-example")
dir_exists("fs-example")
```

Next, we'll add some poorly named files with inconsistent case and delimiters (spaces, underscores, and dashes) without any subfolder organization. All `fs` functions are vectorized, so we can pass multiple file names to the `path` argument of `file_create()` to create all our files at once in our `fs-example` folder.

```{r}
files <- c(
  "RAW-DATA.csv",
  "Clean Data.csv",
  "1-analysis.R",
  "2_visualization.R",
  "Very important report.qmd",
  "Very important report.pdf",
  "Very important report_final.pdf"
)

file_create("fs-example", files)
```

A cool safety feature of `fs` is the `*_create()` functions will not overwrite existing files or folders.

```{r}
try(dir_create("fs-example", "1-analysis.R"))

try(file_create("fs-example"))
```

## Standardize file name case and format

Now we have a messy folder to clean up! Let's take a look using one of my favorite functions: `dir_tree()`. It provides a nicely formatted directory tree and is a great sanity check before and after file manipulation.

```{r}
dir_tree("fs-example")
```

We're ready to make our file names more consistent in case and format! [Allison Horst](https://allisonhorst.com) created this beautiful graphic that demonstrates the different case styles typically used in file naming conventions and programming in general.

![](ah-case.png){fig-alt="Cartoon representations of common cases in coding. A snake screams \"SCREAMING_SNAKE_CASE\" into the face of a camel (wearing ear muffs) with \"camelCase\" written along its back. Vegetables on a skewer spell out \"kebab-case\" (words on a skewer). A mellow, happy looking snake has text \"snake_case\" along it."}

Let's get all the files in our directory into a character vector called `files_old` using `dir_ls()`. Then, we'll use `str_replace_all()` to standardize the file name case and format to snake case, which uses all lower case and dashes as the delimiter.

```{r}
files_old <- dir_ls("fs-example")

files_old

files_new <- files_old |>
  str_to_lower() |>
  str_replace_all(" ", "-") |> 
  str_replace_all("_", "-")

files_new
```

To actually rename these files, we'll use `file_move()`, and then print the file names again to check it worked.

```{r}
file_move(files_old, files_new)

dir_ls("fs-example")
```

Our files are looking much more consistent and readable! 

## Create subfolders and move files

To make the directory easier to navigate, we can create subfolders for our R scripts, data, and reports.

```{r}
subdirs <- c("R", "data", "reports")

dir_create("fs-example", subdirs)

dir_tree("fs-example")
```

We can use `dir_ls()` with the `glob` argument to filter the file paths to just one file type so we can easily move them into the appropriate subfolder with `file_move()`.

```{r}
r_files <- dir_ls("fs-example", glob = "*.r")
data_files <- dir_ls("fs-example", glob = "*.csv")
reports <- dir_ls("fs-example", glob = "*.qmd|*.pdf")

file_move(r_files, "fs-example/R")
file_move(data_files, "fs-example/data")
file_move(reports, "fs-example/reports")
```

Let's take a look at our directory tree to check our files are named and organized as expected.

```{r}
dir_tree("fs-example")
```

Beautiful! Much more tidy! 

## Delete files and directory

Lastly, let's use `dir_delete()` to remove our entire example folder. If we only wanted to delete a file or two, we could instead use `file_delete()`.

```{r}
dir_exists("fs-example")

dir_delete("fs-example")

dir_exists("fs-example")
```

## Conclusion

We hope this guide helps you with your file cleaning and organizing endeavors! While we focused mostly on creating, renaming, moving, and deleting files and directories, `fs` can also help you programmatically query and change file permissions and metadata. Learn more about these functions through the [package documentation website](https://fs.r-lib.org/index.html) and [Tidyverse blog post](https://www.tidyverse.org/blog/2018/01/fs-1.0.0/).